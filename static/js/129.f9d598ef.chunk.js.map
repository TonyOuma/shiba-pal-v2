{"version":3,"sources":["components/authentication/reset-password/ResetPasswordForm.tsx","pages/authentication/ResetPassword.tsx"],"names":["ResetPasswordForm","onSent","onGetEmail","resetPassword","useAuth","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","a","setErrors","setSubmitting","current","error","console","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","Stack","spacing","Alert","severity","TextField","fullWidth","type","label","Boolean","helperText","LoadingButton","size","variant","loading","RootStyle","styled","Page","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","useState","setEmail","sent","setSent","title","LogoOnlyLayout","Container","Box","sx","maxWidth","mx","textAlign","mb","height","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","login","mt","paragraph","color"],"mappings":"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","file":"static/js/129.f9d598ef.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { TextField, Alert, Stack } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n\n// ----------------------------------------------------------------------\n\ntype InitialValues = {\n  email: string;\n  afterSubmit?: string;\n};\n\ntype ResetPasswordFormProps = {\n  onSent: VoidFunction;\n  onGetEmail: (value: string) => void;\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }: ResetPasswordFormProps) {\n  const { resetPassword } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\n  });\n\n  const formik = useFormik<InitialValues>({\n    initialValues: {\n      email: 'demo@minimals.cc'\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        resetPassword?.(values.email);\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.message });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <TextField\n            fullWidth\n            {...getFieldProps('email')}\n            type=\"email\"\n            label=\"Email address\"\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            Reset Password\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// material\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\nimport { Box, Button, Container, Typography } from '@material-ui/core';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport { ResetPasswordForm } from '../../components/authentication/reset-password';\n//\nimport { SentIcon } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <RootStyle title=\"Reset Password | Minimal UI\">\n      <LogoOnlyLayout />\n\n      <Container>\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n          {!sent ? (\n            <>\n              <Typography variant=\"h3\" paragraph>\n                Forgot your password?\n              </Typography>\n              <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                Please enter the email address associated with your account and We will email you a\n                link to reset your password.\n              </Typography>\n\n              <ResetPasswordForm\n                onSent={() => setSent(true)}\n                onGetEmail={(value) => setEmail(value)}\n              />\n\n              <Button\n                fullWidth\n                size=\"large\"\n                component={RouterLink}\n                to={PATH_AUTH.login}\n                sx={{ mt: 1 }}\n              >\n                Back\n              </Button>\n            </>\n          ) : (\n            <Box sx={{ textAlign: 'center' }}>\n              <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n              <Typography variant=\"h3\" gutterBottom>\n                Request sent successfully\n              </Typography>\n              <Typography>\n                We have sent a confirmation email to &nbsp;\n                <strong>{email}</strong>\n                <br />\n                Please check your email.\n              </Typography>\n\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                component={RouterLink}\n                to={PATH_AUTH.login}\n                sx={{ mt: 5 }}\n              >\n                Back\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}