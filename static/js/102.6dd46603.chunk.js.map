{"version":3,"sources":["components/map/controls/MapControlFullscreen.tsx","components/map/controls/MapControlGeolocate.tsx","components/map/controls/MapControlMarker.tsx","components/map/controls/MapControlNavigation.tsx","components/map/controls/MapControlPopup.tsx","components/map/controls/MapControlScale.tsx","components/map/MapZoomToBounds.tsx"],"names":["FullscreenControlStyle","styled","FullscreenControl","theme","zIndex","borderRadius","overflow","top","spacing","left","boxShadow","customShadows","z8","transform","MapControlFullscreen","props","GeolocateControlStyle","GeolocateControl","MapControlGeolocate","positionOptions","enableHighAccuracy","trackUserLocation","IconStyle","height","stroke","cursor","fill","palette","error","main","MapControlMarker","onClick","other","viewBox","d","NavigationControlStyle","NavigationControl","bottom","borderTop","divider","MapControlNavigation","PopupStyle","Popup","isRTL","direction","maxWidth","padding","z20","shape","backgroundColor","grey","width","fontSize","opacity","color","common","white","right","outline","marginBottom","borderBottomColor","marginLeft","borderLeftColor","marginTop","borderTopColor","marginRight","borderRightColor","MapControlPopup","onClose","sx","children","tipSize","anchor","closeButton","closeOnClick","RootStyle","background","position","border","lineHeight","backgroundImage","MapControlScale","unit","mapStyle","MAP_STYLE","sources","layers","slice","MapZoomToBounds","useState","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","onViewportChange","event","feature","features","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","fitBounds","transitionInterpolator","LinearInterpolator","around","offsetCenter","x","y","transitionDuration","interactiveLayerIds","type","data","push","id","source","paint"],"mappings":"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","file":"static/js/102.6dd46603.chunk.js","sourcesContent":["import { experimentalStyled as styled } from '@material-ui/core/styles';\nimport { FullscreenControl, FullscreenControlProps } from 'react-map-gl';\n\n// ----------------------------------------------------------------------\n\nconst FullscreenControlStyle = styled(FullscreenControl)(({ theme }) => ({\n  zIndex: 99,\n  borderRadius: 8,\n  overflow: 'hidden',\n  top: theme.spacing(1.5),\n  left: theme.spacing(1.5),\n  boxShadow: theme.customShadows.z8,\n  '& span.mapboxgl-ctrl-icon': {\n    transform: ' scale(0.75)'\n  }\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function MapControlFullscreen(props: FullscreenControlProps) {\n  return <FullscreenControlStyle {...props} />;\n}\n","import { GeolocateControl } from 'react-map-gl';\nimport { GeolocateControlProps } from 'react-map-gl/src/components/geolocate-control';\n// material\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\n\n// ----------------------------------------------------------------------\n\nconst GeolocateControlStyle = styled(GeolocateControl)(({ theme }) => ({\n  zIndex: 99,\n  borderRadius: 8,\n  overflow: 'hidden',\n  top: theme.spacing(6),\n  left: theme.spacing(1.5),\n  boxShadow: theme.customShadows.z8\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function MapControlGeolocate({ ...props }: GeolocateControlProps) {\n  return (\n    <GeolocateControlStyle\n      positionOptions={{ enableHighAccuracy: true }}\n      trackUserLocation={true}\n      {...props}\n    />\n  );\n}\n","import { Marker, MarkerProps } from 'react-map-gl';\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\n\n// ----------------------------------------------------------------------\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\nconst SIZE = 20;\n\nconst IconStyle = styled('svg')(({ theme }) => ({\n  height: SIZE,\n  stroke: 'none',\n  cursor: 'pointer',\n  fill: theme.palette.error.main,\n  transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n}));\n\n// ----------------------------------------------------------------------\n\ninterface MapControlMarkerProps extends MarkerProps {\n  onClick?: React.MouseEventHandler<SVGSVGElement>;\n}\n\nexport default function MapControlMarker({ onClick, ...other }: MapControlMarkerProps) {\n  return (\n    <Marker {...other}>\n      <IconStyle viewBox=\"0 0 24 24\" onClick={onClick}>\n        <path d={ICON} />\n      </IconStyle>\n    </Marker>\n  );\n}\n","import { NavigationControl } from 'react-map-gl';\nimport { NavigationControlProps } from 'react-map-gl/src/components/navigation-control';\n// material\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\n\n// ----------------------------------------------------------------------\n\nconst NavigationControlStyle = styled(NavigationControl)(({ theme }) => ({\n  zIndex: 99,\n  borderRadius: 8,\n  overflow: 'hidden',\n  bottom: theme.spacing(6),\n  left: theme.spacing(1.5),\n  boxShadow: theme.customShadows.z8,\n  '& button+button': {\n    borderTop: `1px solid ${theme.palette.divider}`\n  }\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function MapControlNavigation({ ...other }: NavigationControlProps) {\n  return <NavigationControlStyle {...other} />;\n}\n","import { Popup, PopupProps } from 'react-map-gl';\n// material\nimport { SxProps } from '@material-ui/system';\nimport { Theme, experimentalStyled as styled } from '@material-ui/core/styles';\n\n// ----------------------------------------------------------------------\n\n// @ts-ignore\nconst PopupStyle = styled(Popup)(({ theme }) => {\n  const isRTL = theme.direction === 'rtl';\n\n  return {\n    '& .mapboxgl-popup-content': {\n      maxWidth: 180,\n      padding: theme.spacing(1),\n      boxShadow: theme.customShadows.z20,\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: theme.palette.grey[800]\n    },\n    '& .mapboxgl-popup-close-button': {\n      width: 24,\n      height: 24,\n      fontSize: 16,\n      opacity: 0.48,\n      color: theme.palette.common.white,\n      right: isRTL && '0',\n      left: isRTL && 'auto',\n      '&:hover': {\n        opacity: 1\n      },\n      '&:focus': {\n        outline: 'none'\n      }\n    },\n    '&.mapboxgl-popup-anchor-top .mapboxgl-popup-tip': {\n      marginBottom: -1,\n      borderBottomColor: theme.palette.grey[800]\n    },\n    '&.mapboxgl-popup-anchor-right .mapboxgl-popup-tip': {\n      marginLeft: -1,\n      borderLeftColor: theme.palette.grey[800]\n    },\n    '&.mapboxgl-popup-anchor-bottom .mapboxgl-popup-tip': {\n      marginTop: -1,\n      borderTopColor: theme.palette.grey[800]\n    },\n    '&.mapboxgl-popup-anchor-left .mapboxgl-popup-tip': {\n      marginRight: -1,\n      borderRightColor: theme.palette.grey[800]\n    }\n  };\n});\n\ninterface MapControlPopupProps extends PopupProps {\n  sx?: SxProps<Theme>;\n}\n\n// ----------------------------------------------------------------------\n\nexport default function MapControlPopup({ onClose, sx, children, ...other }: MapControlPopupProps) {\n  return (\n    <PopupStyle\n      tipSize={8}\n      anchor=\"bottom\"\n      onClose={onClose}\n      closeButton={true}\n      closeOnClick={false}\n      sx={sx}\n      {...other}\n    >\n      {children}\n    </PopupStyle>\n  );\n}\n","import { ScaleControl } from 'react-map-gl';\nimport { ScaleControlProps } from 'react-map-gl/src/components/scale-control';\n// material\nimport { experimentalStyled as styled, Theme } from '@material-ui/core/styles';\nimport { SxProps } from '@material-ui/system';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  zIndex: 99,\n  background: 'red',\n  position: 'absolute',\n  left: theme.spacing(1.5),\n  bottom: theme.spacing(3.5),\n  boxShadow: theme.customShadows.z8,\n  '& .mapboxgl-ctrl': {\n    border: 'none',\n    borderRadius: 4,\n    lineHeight: '14px',\n    color: theme.palette.common.white,\n    backgroundImage: `linear-gradient(to right, #8a2387, #e94057, #f27121)`\n  }\n}));\n\n// ----------------------------------------------------------------------\n\ninterface MapControlScaleProps extends ScaleControlProps {\n  sx?: SxProps<Theme>;\n}\n\nexport default function MapControlScale({ sx, ...other }: MapControlScaleProps) {\n  return (\n    <RootStyle sx={sx}>\n      <ScaleControl maxWidth={100} unit=\"imperial\" {...other} />\n    </RootStyle>\n  );\n}\n","import bbox from '@turf/bbox';\nimport { useState } from 'react';\nimport MapGL, { MapEvent, LinearInterpolator, WebMercatorViewport } from 'react-map-gl';\nimport { InteractiveMapProps } from 'react-map-gl/src/components/interactive-map';\n//\nimport {\n  MapControlScale,\n  MapControlGeolocate,\n  MapControlNavigation,\n  MapControlFullscreen\n} from './controls';\nimport MAP_STYLE from './assets/map-style-basic-v8.json';\n\n// ----------------------------------------------------------------------\n\nconst mapStyle: Record<string, any> = {\n  ...MAP_STYLE,\n  sources: { ...MAP_STYLE.sources },\n  layers: MAP_STYLE.layers.slice()\n};\n\nmapStyle.sources['sf-neighborhoods'] = {\n  type: 'geojson',\n  data:\n    'https://raw.githubusercontent.com/uber/react-map-gl/master/examples/.data/feature-example-sf.json'\n};\n\nmapStyle.layers.push(\n  {\n    id: 'sf-neighborhoods-fill',\n    source: 'sf-neighborhoods',\n    type: 'fill',\n    paint: {\n      'fill-outline-color': '#0040c8',\n      'fill-color': '#fff',\n      'fill-opacity': 0\n    }\n  },\n  {\n    id: 'sf-neighborhoods-outline',\n    source: 'sf-neighborhoods',\n    type: 'line',\n    paint: {\n      'line-width': 2,\n      'line-color': '#0080ef'\n    }\n  }\n);\n\n// ----------------------------------------------------------------------\n\nexport default function MapZoomToBounds({ ...other }: InteractiveMapProps) {\n  const [viewport, setViewport] = useState<Record<string, number | LinearInterpolator>>({\n    latitude: 37.78,\n    longitude: -122.4,\n    zoom: 11,\n    bearing: 0,\n    pitch: 0\n  });\n\n  const onClick = (event: MapEvent) => {\n    const feature = event.features?.[0];\n    if (feature) {\n      const [minLng, minLat, maxLng, maxLat] = bbox(feature);\n      const viewports = new WebMercatorViewport(viewport as any);\n      const { longitude, latitude, zoom } = viewports.fitBounds(\n        [\n          [minLng, minLat],\n          [maxLng, maxLat]\n        ],\n        { padding: 40 }\n      );\n      setViewport({\n        longitude,\n        latitude,\n        zoom,\n        transitionInterpolator: new LinearInterpolator({\n          around: [event.offsetCenter.x, event.offsetCenter.y]\n        }),\n        transitionDuration: 1000\n      });\n    }\n  };\n\n  return (\n    <>\n      <MapGL\n        {...viewport}\n        mapStyle={mapStyle}\n        onViewportChange={setViewport}\n        onClick={onClick}\n        interactiveLayerIds={['sf-neighborhoods-fill']}\n        {...other}\n      >\n        <MapControlScale />\n        <MapControlNavigation />\n        <MapControlFullscreen />\n        <MapControlGeolocate />\n      </MapGL>\n    </>\n  );\n}\n"],"sourceRoot":""}