{"version":3,"sources":["components/map/MapClusters.tsx"],"names":["clusterLayer","id","type","source","filter","paint","clusterCountLayer","layout","unClusteredPointLayer","MapClusters","other","mapRef","useRef","useState","latitude","longitude","zoom","bearing","pitch","transitionDuration","viewport","setViewport","interactiveLayerIds","undefined","onViewportChange","onClick","event","feature","features","clusterId","properties","cluster_id","current","getMap","getSource","getClusterExpansionZoom","err","geometry","coordinates","isNaN","ref","data","cluster","clusterMaxZoom","clusterRadius"],"mappings":"2MAKMA,EAA2B,CAC/BC,GAAI,WACJC,KAAM,SACNC,OAAQ,cACRC,OAAQ,CAAC,MAAO,eAChBC,MAAO,CACL,eAAgB,CAAC,OAAQ,CAAC,MAAO,eAAgB,UAAW,IAAK,UAAW,IAAK,WACjF,gBAAiB,CAAC,OAAQ,CAAC,MAAO,eAAgB,GAAI,IAAK,GAAI,IAAK,MAIlEC,EAAgC,CACpCL,GAAI,gBACJC,KAAM,SACNC,OAAQ,cACRC,OAAQ,CAAC,MAAO,eAChBG,OAAQ,CACN,aAAc,4BACd,YAAa,CAAC,sBAAuB,yBACrC,YAAa,IAEfF,MAAO,IAGHG,EAAoC,CACxCP,GAAI,oBACJC,KAAM,SACNC,OAAQ,cACRC,OAAQ,CAAC,IAAK,CAAC,MAAO,gBACtBC,MAAO,CACL,eAAgB,UAChB,gBAAiB,EACjB,sBAAuB,EACvB,sBAAuB,SAMZ,SAASI,EAAT,GAAoC,IAAVC,EAAS,oBAC1CC,EAASC,iBAAe,MAC9B,EAAgCC,mBAAS,CACvCC,SAAU,MACVC,WAAY,OACZC,KAAM,EACNC,QAAS,EACTC,MAAO,EACPC,mBAAoB,MANtB,mBAAOC,EAAP,KAAiBC,EAAjB,KA4BMC,EAAsBtB,EAAaC,GAAK,CAACD,EAAaC,SAAMsB,EAElE,OACE,mCACE,cAAC,IAAD,uCACMH,GADN,IAEEI,iBAAkBH,EAClBC,oBAAqBA,EACrBG,QA3BU,SAACC,GAAqB,IAAD,IAC7BC,EAAO,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAOE,gBAAV,aAAG,EAAkB,GAC5BC,EAAYF,GAAWA,EAAQG,WAAWC,YAC9B,UAAGpB,EAAOqB,eAAV,aAAG,EAAgBC,SAASC,UAAU,gBAE3CC,wBAAwBN,GAAW,SAACO,EAAUpB,GACrDoB,GAGJf,EAAY,2BACPD,GADM,IAETL,UAAWY,GAAWA,EAAQU,SAASC,YAAY,GACnDxB,SAAUa,GAAWA,EAAQU,SAASC,YAAY,GAClDtB,KAAMuB,MAAMvB,GAAQ,EAAIA,EACxBG,mBAAoB,WAcpBqB,IAAK7B,GACDD,GANN,aAQE,eAAC,IAAD,CACET,GAAG,cACHC,KAAK,UACLuC,KAAK,kEACLC,SAAS,EACTC,eAAgB,GAChBC,cAAe,GANjB,UAQE,cAAC,IAAD,eAAW5C,IACX,cAAC,IAAD,eAAWM,IACX,cAAC,IAAD,eAAWE","file":"static/js/124.778e87ea.chunk.js","sourcesContent":["import { useState, useRef } from 'react';\nimport MapGL, { Source, Layer, MapEvent, MapRef, LayerProps } from 'react-map-gl';\n\n// ----------------------------------------------------------------------\n\nconst clusterLayer: LayerProps = {\n  id: 'clusters',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  paint: {\n    'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n    'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n  }\n};\n\nconst clusterCountLayer: LayerProps = {\n  id: 'cluster-count',\n  type: 'symbol',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  layout: {\n    'text-field': '{point_count_abbreviated}',\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n    'text-size': 12\n  },\n  paint: {}\n};\n\nconst unClusteredPointLayer: LayerProps = {\n  id: 'unclustered-point',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['!', ['has', 'point_count']],\n  paint: {\n    'circle-color': '#11b4da',\n    'circle-radius': 4,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#fff'\n  }\n};\n\n// ----------------------------------------------------------------------\n\nexport default function MapClusters({ ...other }) {\n  const mapRef = useRef<MapRef>(null);\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    transitionDuration: 500\n  });\n\n  const onClick = (event: MapEvent) => {\n    const feature = event?.features?.[0];\n    const clusterId = feature && feature.properties.cluster_id;\n    const mapboxSource = mapRef.current?.getMap().getSource('earthquakes');\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err: any, zoom: number) => {\n      if (err) {\n        return;\n      }\n      setViewport({\n        ...viewport,\n        longitude: feature && feature.geometry.coordinates[0],\n        latitude: feature && feature.geometry.coordinates[1],\n        zoom: isNaN(zoom) ? 3 : zoom,\n        transitionDuration: 500\n      });\n    });\n  };\n\n  const interactiveLayerIds = clusterLayer.id ? [clusterLayer.id] : undefined;\n\n  return (\n    <>\n      <MapGL\n        {...viewport}\n        onViewportChange={setViewport}\n        interactiveLayerIds={interactiveLayerIds}\n        onClick={onClick}\n        ref={mapRef}\n        {...other}\n      >\n        <Source\n          id=\"earthquakes\"\n          type=\"geojson\"\n          data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n          cluster={true}\n          clusterMaxZoom={14}\n          clusterRadius={50}\n        >\n          <Layer {...clusterLayer} />\n          <Layer {...clusterCountLayer} />\n          <Layer {...unClusteredPointLayer} />\n        </Source>\n      </MapGL>\n    </>\n  );\n}\n"],"sourceRoot":""}